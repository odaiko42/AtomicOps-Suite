#Requires -Version 5.1
<#
.SYNOPSIS
    Valide le syst√®me complet de base de donn√©es catalogue SQLite.

.DESCRIPTION
    Ce script PowerShell effectue une validation compl√®te du syst√®me de catalogue
    SQLite pour s'assurer que tous les composants fonctionnent correctement.
    
    Tests effectu√©s :
    - Initialisation et int√©grit√© de la base de donn√©es
    - Fonctionnement des scripts d'enregistrement
    - Syst√®me de recherche et consultation
    - Exports multi-formats
    - Performance et coh√©rence des donn√©es
    - Validation des outils auxiliaires

.PARAMETER SkipBackup
    Ignore la cr√©ation de backup avant les tests

.PARAMETER QuickTest
    Effectue uniquement les tests essentiels (plus rapide)

.PARAMETER Verbose
    Affichage d√©taill√© des √©tapes de validation

.PARAMETER OutputReport
    G√©n√®re un rapport de validation dans un fichier

.EXAMPLE
    .\validate-db-system.ps1
    
.EXAMPLE
    .\validate-db-system.ps1 -QuickTest -Verbose
    
.EXAMPLE
    .\validate-db-system.ps1 -OutputReport "validation_report.txt"

.NOTES
    Auteur: Syst√®me de Catalogue SQLite CT
    Version: 1.0
    Date: 3 octobre 2025
    
    Pr√©requis:
    - Tous les scripts du syst√®me catalogue pr√©sents
    - SQLite3 accessible ou module PSSQLite
    - PowerShell 5.1+
#>

[CmdletBinding()]
param(
    [Parameter(HelpMessage="Ignorer la cr√©ation de backup")]
    [switch]$SkipBackup,
    
    [Parameter(HelpMessage="Tests rapides uniquement")]
    [switch]$QuickTest,
    
    [Parameter(HelpMessage="Affichage d√©taill√©")]
    [switch]$Verbose,
    
    [Parameter(HelpMessage="Fichier de rapport de validation")]
    [string]$OutputReport
)

# Configuration globale
$ErrorActionPreference = "Continue"  # Continuer sur erreur pour tous les tests
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$ProjectRoot = Split-Path -Parent $ScriptDir
$DatabaseFile = Join-Path $ProjectRoot "database\scripts_catalogue.db"

# Codes de sortie
$EXIT_SUCCESS = 0
$EXIT_ERROR_DB = 2
$EXIT_ERROR_TOOLS = 3

# Variables de test globales
$TestResults = @{
    Total = 0
    Passed = 0
    Failed = 0
    Warnings = 0
    StartTime = Get-Date
    Tests = @()
    TempDir = ""
}

# Fonctions de logging avec couleurs
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Cyan
    Add-ToReport "INFO: $Message"
}

function Write-Warn {
    param([string]$Message)
    Write-Host "[WARN] $Message" -ForegroundColor Yellow
    Add-ToReport "WARN: $Message"
    $TestResults.Warnings++
}

function Write-Success {
    param([string]$Message)
    Write-Host "[OK] $Message" -ForegroundColor Green
    Add-ToReport "OK: $Message"
}

function Write-Error-Custom {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
    Add-ToReport "ERROR: $Message"
}

function Write-Verbose-Custom {
    param([string]$Message)
    if ($Verbose) {
        Write-Host "[VERBOSE] $Message" -ForegroundColor Gray
        Add-ToReport "VERBOSE: $Message"
    }
}

# Fonction pour ajouter au rapport
function Add-ToReport {
    param([string]$Message)
    
    if ($OutputReport) {
        $timestamp = Get-Date -Format "HH:mm:ss"
        "$timestamp - $Message" | Add-Content -Path $OutputReport -Encoding UTF8
    }
}

# Fonction pour ex√©cuter des commandes SQLite
function Invoke-SQLite {
    param(
        [string]$Query,
        [string]$Database = $DatabaseFile,
        [switch]$SuppressErrors
    )
    
    try {
        if (Get-Command sqlite3 -ErrorAction SilentlyContinue) {
            $result = & sqlite3 $Database $Query 2>$null
            if ($LASTEXITCODE -ne 0 -and -not $SuppressErrors) {
                throw "Erreur SQLite: $LASTEXITCODE"
            }
            return $result
        }
        elseif (Get-Module -ListAvailable -Name PSSQLite) {
            Import-Module PSSQLite -ErrorAction SilentlyContinue
            return Invoke-SqliteQuery -DataSource $Database -Query $Query -ErrorAction Stop
        }
        else {
            if (-not $SuppressErrors) {
                throw "SQLite3 non disponible"
            }
            return $null
        }
    }
    catch {
        if (-not $SuppressErrors) {
            throw
        }
        return $null
    }
}

# Fonction pour enregistrer un r√©sultat de test
function Record-TestResult {
    param(
        [string]$TestName,
        [bool]$Success,
        [string]$Details = "",
        [string]$ErrorMessage = ""
    )
    
    $TestResults.Total++
    
    $result = @{
        Name = $TestName
        Success = $Success
        Details = $Details
        ErrorMessage = $ErrorMessage
        Timestamp = Get-Date
    }
    
    $TestResults.Tests += $result
    
    if ($Success) {
        $TestResults.Passed++
        Write-Success "‚úì $TestName"
        if ($Details) {
            Write-Verbose-Custom $Details
        }
    }
    else {
        $TestResults.Failed++
        Write-Error-Custom "‚úó $TestName"
        if ($ErrorMessage) {
            Write-Error-Custom "  ‚Üí $ErrorMessage"
        }
    }
}

# Test 1: V√©rification des pr√©requis syst√®me
function Test-Prerequisites {
    Write-Info "üîç Test 1: V√©rification des pr√©requis syst√®me"
    
    # Test SQLite
    try {
        if (Get-Command sqlite3 -ErrorAction SilentlyContinue) {
            $version = & sqlite3 -version 2>$null
            Record-TestResult "SQLite3 disponible" $true "Version: $version"
        }
        elseif (Get-Module -ListAvailable -Name PSSQLite) {
            Record-TestResult "Module PSSQLite disponible" $true
        }
        else {
            Record-TestResult "SQLite disponible" $false "" "Ni sqlite3 ni PSSQLite trouv√©s"
            return $false
        }
    }
    catch {
        Record-TestResult "SQLite disponible" $false "" $_.Exception.Message
        return $false
    }
    
    # Test PowerShell version
    $psVersion = $PSVersionTable.PSVersion
    if ($psVersion.Major -ge 5) {
        Record-TestResult "PowerShell version" $true "Version: $psVersion"
    }
    else {
        Record-TestResult "PowerShell version" $false "" "Version $psVersion < 5.0 requise"
    }
    
    # Test structure de r√©pertoires
    $requiredDirs = @("database", "tools", "exports")
    foreach ($dir in $requiredDirs) {
        $dirPath = Join-Path $ProjectRoot $dir
        if (Test-Path $dirPath) {
            Record-TestResult "R√©pertoire $dir" $true "Chemin: $dirPath"
        }
        else {
            Record-TestResult "R√©pertoire $dir" $false "" "R√©pertoire manquant: $dirPath"
        }
    }
    
    return $true
}

# Test 2: Int√©grit√© de la base de donn√©es
function Test-DatabaseIntegrity {
    Write-Info "üóÑÔ∏è Test 2: Int√©grit√© de la base de donn√©es"
    
    # V√©rifier l'existence du fichier
    if (Test-Path $DatabaseFile) {
        Record-TestResult "Fichier base de donn√©es existe" $true "Chemin: $DatabaseFile"
    }
    else {
        Record-TestResult "Fichier base de donn√©es existe" $false "" "Fichier non trouv√©: $DatabaseFile"
        return $false
    }
    
    # Test d'int√©grit√© SQLite
    try {
        $integrityResult = Invoke-SQLite "PRAGMA integrity_check;"
        if ($integrityResult -eq "ok") {
            Record-TestResult "Int√©grit√© SQLite" $true
        }
        else {
            Record-TestResult "Int√©grit√© SQLite" $false "" "R√©sultat: $integrityResult"
        }
    }
    catch {
        Record-TestResult "Int√©grit√© SQLite" $false "" $_.Exception.Message
    }
    
    # V√©rifier les tables essentielles
    $expectedTables = @("scripts", "script_parameters", "script_dependencies", "functions", "exit_codes")
    
    try {
        $tables = Invoke-SQLite "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';"
        $tableList = $tables -split "`n" | Where-Object { $_ }
        
        foreach ($table in $expectedTables) {
            if ($tableList -contains $table) {
                Record-TestResult "Table $table" $true
            }
            else {
                Record-TestResult "Table $table" $false "" "Table manquante"
            }
        }
        
        # Compter le nombre total de tables
        $totalTables = $tableList.Count
        Record-TestResult "Nombre de tables" ($totalTables -ge 10) "Tables trouv√©es: $totalTables"
    }
    catch {
        Record-TestResult "V√©rification des tables" $false "" $_.Exception.Message
    }
    
    # Test des contraintes de cl√©s √©trang√®res
    try {
        $fkResult = Invoke-SQLite "PRAGMA foreign_key_check;"
        if (-not $fkResult -or $fkResult.Trim() -eq "") {
            Record-TestResult "Contraintes cl√©s √©trang√®res" $true
        }
        else {
            Record-TestResult "Contraintes cl√©s √©trang√®res" $false "" "Violations: $fkResult"
        }
    }
    catch {
        Record-TestResult "Contraintes cl√©s √©trang√®res" $false "" $_.Exception.Message
    }
    
    return $true
}

# Test 3: Outils de gestion disponibles
function Test-ManagementTools {
    Write-Info "üîß Test 3: Outils de gestion disponibles"
    
    $tools = @{
        "register-script.ps1" = "Enregistrement unitaire"
        "register-all-scripts.ps1" = "Enregistrement en masse"
        "search-db.ps1" = "Recherche et consultation"
        "export-db.ps1" = "Export multi-format"
        "setup-db-system.ps1" = "Installation automatis√©e"
    }
    
    foreach ($tool in $tools.GetEnumerator()) {
        $toolPath = Join-Path $ScriptDir $tool.Key
        
        if (Test-Path $toolPath) {
            Record-TestResult "Outil $($tool.Key)" $true $tool.Value
            
            # Test de syntaxe PowerShell (basique)
            try {
                $syntax = Get-Command $toolPath -Syntax -ErrorAction Stop
                Write-Verbose-Custom "Syntaxe OK pour $($tool.Key)"
            }
            catch {
                Write-Warn "Probl√®me de syntaxe pour $($tool.Key): $($_.Exception.Message)"
            }
        }
        else {
            Record-TestResult "Outil $($tool.Key)" $false "" "Fichier non trouv√©"
        }
    }
    
    return $true
}

# Test 4: Fonctionnement des scripts (tests l√©gers)
function Test-ScriptFunctionality {
    Write-Info "‚öôÔ∏è Test 4: Fonctionnement des scripts"
    
    # Test du script de recherche (help)
    try {
        $searchScript = Join-Path $ScriptDir "search-db.ps1"
        if (Test-Path $searchScript) {
            # Test avec param√®tre d'aide (ne devrait pas √©chouer)
            $helpResult = & powershell.exe -File $searchScript -ErrorAction SilentlyContinue 2>$null
            # Si pas d'erreur critique, c'est bon
            Record-TestResult "Script de recherche ex√©cutable" $true
        }
        else {
            Record-TestResult "Script de recherche ex√©cutable" $false "" "Script non trouv√©"
        }
    }
    catch {
        Record-TestResult "Script de recherche ex√©cutable" $false "" $_.Exception.Message
    }
    
    # Test du script d'export (help)
    try {
        $exportScript = Join-Path $ScriptDir "export-db.ps1"
        if (Test-Path $exportScript) {
            # Juste v√©rifier que le script peut √™tre charg√©
            $null = Get-Command $exportScript -ErrorAction Stop
            Record-TestResult "Script d'export ex√©cutable" $true
        }
        else {
            Record-TestResult "Script d'export ex√©cutable" $false "" "Script non trouv√©"
        }
    }
    catch {
        Record-TestResult "Script d'export ex√©cutable" $false "" $_.Exception.Message
    }
    
    # Test de base de donn√©es (requ√™te simple)
    if (Test-Path $DatabaseFile) {
        try {
            $scriptCount = Invoke-SQLite "SELECT COUNT(*) FROM scripts;"
            $count = [int]$scriptCount
            Record-TestResult "Requ√™te de base fonctionnelle" $true "Scripts catalogu√©s: $count"
            
            if ($count -gt 0) {
                # Test requ√™te plus complexe
                $complexQuery = @"
SELECT s.name, COUNT(sp.id) as params 
FROM scripts s 
LEFT JOIN script_parameters sp ON s.id = sp.script_id 
GROUP BY s.id 
LIMIT 5;
"@
                $complexResult = Invoke-SQLite $complexQuery
                Record-TestResult "Requ√™te complexe fonctionnelle" $true
            }
        }
        catch {
            Record-TestResult "Requ√™te de base fonctionnelle" $false "" $_.Exception.Message
        }
    }
    
    return $true
}

# Test 5: Performance de base (si pas en mode rapide)
function Test-BasicPerformance {
    if ($QuickTest) {
        Write-Info "‚è±Ô∏è Test 5: Performance (ignor√© en mode rapide)"
        return $true
    }
    
    Write-Info "‚è±Ô∏è Test 5: Performance de base"
    
    if (-not (Test-Path $DatabaseFile)) {
        Record-TestResult "Test de performance" $false "" "Base de donn√©es non disponible"
        return $false
    }
    
    # Test performance requ√™te simple
    try {
        $startTime = Get-Date
        $result = Invoke-SQLite "SELECT COUNT(*) FROM scripts;"
        $endTime = Get-Date
        $duration = ($endTime - $startTime).TotalMilliseconds
        
        if ($duration -lt 1000) {  # Moins d'1 seconde
            Record-TestResult "Performance requ√™te simple" $true "Dur√©e: ${duration}ms"
        }
        else {
            Record-TestResult "Performance requ√™te simple" $false "" "Dur√©e: ${duration}ms (> 1000ms)"
        }
    }
    catch {
        Record-TestResult "Performance requ√™te simple" $false "" $_.Exception.Message
    }
    
    # Test performance requ√™te complexe
    try {
        $complexQuery = @"
SELECT s.category, s.type, COUNT(*) as count
FROM scripts s
LEFT JOIN script_dependencies sd ON s.id = sd.script_id
GROUP BY s.category, s.type
ORDER BY count DESC;
"@
        
        $startTime = Get-Date
        $result = Invoke-SQLite $complexQuery
        $endTime = Get-Date
        $duration = ($endTime - $startTime).TotalMilliseconds
        
        if ($duration -lt 2000) {  # Moins de 2 secondes
            Record-TestResult "Performance requ√™te complexe" $true "Dur√©e: ${duration}ms"
        }
        else {
            Record-TestResult "Performance requ√™te complexe" $false "" "Dur√©e: ${duration}ms (> 2000ms)"
        }
    }
    catch {
        Record-TestResult "Performance requ√™te complexe" $false "" $_.Exception.Message
    }
    
    # Taille de la base de donn√©es
    try {
        $dbSize = (Get-Item $DatabaseFile).Length
        $dbSizeKB = [math]::Round($dbSize / 1KB, 1)
        
        if ($dbSizeKB -lt 10240) {  # Moins de 10MB
            Record-TestResult "Taille base acceptable" $true "Taille: ${dbSizeKB}KB"
        }
        else {
            Write-Warn "Base de donn√©es volumineuse: ${dbSizeKB}KB"
            Record-TestResult "Taille base acceptable" $true "Taille: ${dbSizeKB}KB (volumineuse)"
        }
    }
    catch {
        Record-TestResult "Taille base acceptable" $false "" $_.Exception.Message
    }
    
    return $true
}

# Test 6: Coh√©rence des donn√©es
function Test-DataConsistency {
    Write-Info "üìä Test 6: Coh√©rence des donn√©es"
    
    if (-not (Test-Path $DatabaseFile)) {
        Record-TestResult "Coh√©rence des donn√©es" $false "" "Base de donn√©es non disponible"
        return $false
    }
    
    try {
        # V√©rifier qu'il n'y a pas de scripts avec des noms en double
        $duplicateNames = Invoke-SQLite "SELECT name, COUNT(*) as count FROM scripts GROUP BY name HAVING count > 1;"
        if (-not $duplicateNames -or $duplicateNames.Trim() -eq "") {
            Record-TestResult "Pas de noms en double" $true
        }
        else {
            Record-TestResult "Pas de noms en double" $false "" "Doublons trouv√©s: $duplicateNames"
        }
    }
    catch {
        Record-TestResult "Pas de noms en double" $false "" $_.Exception.Message
    }
    
    try {
        # V√©rifier que tous les scripts ont une description
        $scriptsWithoutDesc = Invoke-SQLite "SELECT COUNT(*) FROM scripts WHERE description IS NULL OR description = '';"
        $count = [int]$scriptsWithoutDesc
        if ($count -eq 0) {
            Record-TestResult "Tous les scripts ont une description" $true
        }
        else {
            Record-TestResult "Tous les scripts ont une description" $false "" "$count script(s) sans description"
        }
    }
    catch {
        Record-TestResult "Tous les scripts ont une description" $false "" $_.Exception.Message
    }
    
    try {
        # V√©rifier les r√©f√©rences d'int√©grit√© basiques
        $orphanParams = Invoke-SQLite "SELECT COUNT(*) FROM script_parameters WHERE script_id NOT IN (SELECT id FROM scripts);"
        $orphanCount = [int]$orphanParams
        if ($orphanCount -eq 0) {
            Record-TestResult "Int√©grit√© param√®tres" $true
        }
        else {
            Record-TestResult "Int√©grit√© param√®tres" $false "" "$orphanCount param√®tre(s) orphelin(s)"
        }
    }
    catch {
        Record-TestResult "Int√©grit√© param√®tres" $false "" $_.Exception.Message
    }
    
    return $true
}

# Cr√©er un backup avant tests
function Create-TestBackup {
    if ($SkipBackup) {
        Write-Info "üíæ Backup ignor√© (-SkipBackup sp√©cifi√©)"
        return $true
    }
    
    Write-Info "üíæ Cr√©ation d'un backup avant tests"
    
    if (-not (Test-Path $DatabaseFile)) {
        Write-Warn "Pas de base de donn√©es √† sauvegarder"
        return $true
    }
    
    try {
        $backupName = "backup_validation_$(Get-Date -Format 'yyyyMMdd_HHmmss').db"
        $backupPath = Join-Path $TestResults.TempDir $backupName
        
        Copy-Item -Path $DatabaseFile -Destination $backupPath -Force
        Record-TestResult "Backup cr√©√©" $true "Fichier: $backupName"
        
        Write-Verbose-Custom "Backup sauvegard√©: $backupPath"
        return $true
    }
    catch {
        Record-TestResult "Backup cr√©√©" $false "" $_.Exception.Message
        return $false
    }
}

# Nettoyer l'environnement de test
function Clean-TestEnvironment {
    Write-Info "üßπ Nettoyage de l'environnement de test"
    
    if ($TestResults.TempDir -and (Test-Path $TestResults.TempDir)) {
        try {
            Remove-Item -Path $TestResults.TempDir -Recurse -Force -ErrorAction SilentlyContinue
            Write-Verbose-Custom "R√©pertoire temporaire nettoy√©: $($TestResults.TempDir)"
        }
        catch {
            Write-Warn "Impossible de nettoyer le r√©pertoire temporaire: $($_.Exception.Message)"
        }
    }
}

# Afficher le rapport final
function Show-ValidationReport {
    $endTime = Get-Date
    $duration = $endTime - $TestResults.StartTime
    
    Write-Host ""
    Write-Host "üìä RAPPORT DE VALIDATION" -ForegroundColor Cyan
    Write-Host "========================" -ForegroundColor Cyan
    Write-Host ""
    
    # Statistiques g√©n√©rales
    Write-Host "üìà R√©sultats g√©n√©raux :" -ForegroundColor White
    Write-Host "  Tests ex√©cut√©s       : $($TestResults.Total)" -ForegroundColor Gray
    Write-Host "  R√©ussis              : " -NoNewline -ForegroundColor Gray
    Write-Host "$($TestResults.Passed)" -ForegroundColor Green
    Write-Host "  √âchecs               : " -NoNewline -ForegroundColor Gray
    Write-Host "$($TestResults.Failed)" -ForegroundColor Red
    Write-Host "  Avertissements       : " -NoNewline -ForegroundColor Gray
    Write-Host "$($TestResults.Warnings)" -ForegroundColor Yellow
    Write-Host "  Dur√©e totale         : $($duration.ToString('mm\:ss'))" -ForegroundColor Gray
    Write-Host ""
    
    # Taux de r√©ussite
    $successRate = if ($TestResults.Total -gt 0) {
        [math]::Round(($TestResults.Passed / $TestResults.Total) * 100, 1)
    } else { 0 }
    
    Write-Host "üìä Taux de r√©ussite     : $successRate%" -ForegroundColor Gray
    Write-Host ""
    
    # D√©tail par cat√©gorie de tests
    if ($TestResults.Failed -gt 0) {
        Write-Host "‚ùå Tests √©chou√©s :" -ForegroundColor Red
        foreach ($test in $TestResults.Tests) {
            if (-not $test.Success) {
                Write-Host "  ‚Ä¢ $($test.Name)" -ForegroundColor Red
                if ($test.ErrorMessage) {
                    Write-Host "    ‚Üí $($test.ErrorMessage)" -ForegroundColor DarkRed
                }
            }
        }
        Write-Host ""
    }
    
    # Message final et recommandations
    if ($TestResults.Failed -eq 0) {
        Write-Success "üéâ VALIDATION R√âUSSIE - Le syst√®me fonctionne correctement !"
        Write-Host ""
        Write-Host "‚ú® Le syst√®me de catalogue SQLite est op√©rationnel :" -ForegroundColor Green
        Write-Host "  ‚Ä¢ Base de donn√©es int√®gre et performante" -ForegroundColor Gray
        Write-Host "  ‚Ä¢ Tous les outils de gestion fonctionnels" -ForegroundColor Gray
        Write-Host "  ‚Ä¢ Coh√©rence des donn√©es valid√©e" -ForegroundColor Gray
        Write-Host ""
        Write-Host "üöÄ Prochaines √©tapes recommand√©es :" -ForegroundColor Cyan
        Write-Host "  1. .\tools\register-all-scripts.ps1    # Mettre √† jour le catalogue" -ForegroundColor Gray
        Write-Host "  2. .\tools\search-db.ps1 -Stats        # Voir les statistiques" -ForegroundColor Gray
        Write-Host "  3. .\tools\export-db.ps1 -Format backup # Cr√©er un backup" -ForegroundColor Gray
    }
    else {
        Write-Error-Custom "‚ùå VALIDATION √âCHOU√âE - $($TestResults.Failed) probl√®me(s) d√©tect√©(s)"
        Write-Host ""
        Write-Host "üîß Actions de d√©pannage recommand√©es :" -ForegroundColor Yellow
        Write-Host "  1. V√©rifiez les permissions sur database/ et tools/" -ForegroundColor Gray
        Write-Host "  2. R√©initialisez la base : .\database\init-db.ps1 -Force" -ForegroundColor Gray
        Write-Host "  3. Installez les pr√©requis manquants (SQLite3, modules PS)" -ForegroundColor Gray
        Write-Host "  4. Consultez les logs d√©taill√©s ci-dessus" -ForegroundColor Gray
    }
    
    Write-Host ""
    
    # Informations sur la base
    if (Test-Path $DatabaseFile) {
        try {
            $dbSize = (Get-Item $DatabaseFile).Length
            $dbSizeKB = [math]::Round($dbSize / 1KB, 1)
            $scriptCount = Invoke-SQLite "SELECT COUNT(*) FROM scripts;" -SuppressErrors
            
            Write-Host "üóÑÔ∏è  √âtat de la base de donn√©es :" -ForegroundColor White
            Write-Host "  Fichier              : $DatabaseFile" -ForegroundColor Gray
            Write-Host "  Taille               : $dbSizeKB KB" -ForegroundColor Gray
            if ($scriptCount) {
                Write-Host "  Scripts catalogu√©s   : $scriptCount" -ForegroundColor Gray
            }
        }
        catch {
            Write-Host "  √âtat                 : Probl√®me d'acc√®s" -ForegroundColor Red
        }
    }
    else {
        Write-Host "üóÑÔ∏è  Base de donn√©es     : Non trouv√©e" -ForegroundColor Red
    }
    
    # Rapport de fichier si demand√©
    if ($OutputReport) {
        Write-Host ""
        Write-Host "üìÑ Rapport d√©taill√© sauvegard√© : $OutputReport" -ForegroundColor Cyan
    }
}

# Initialiser l'environnement de test
function Initialize-TestEnvironment {
    # Cr√©er un r√©pertoire temporaire
    $TestResults.TempDir = Join-Path ([System.IO.Path]::GetTempPath()) "validate_db_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    New-Item -ItemType Directory -Path $TestResults.TempDir -Force | Out-Null
    
    Write-Verbose-Custom "R√©pertoire temporaire: $($TestResults.TempDir)"
    
    # Initialiser le fichier de rapport si demand√©
    if ($OutputReport) {
        $reportPath = if ([System.IO.Path]::IsPathRooted($OutputReport)) {
            $OutputReport
        } else {
            Join-Path $PWD $OutputReport
        }
        
        # Cr√©er le fichier de rapport avec en-t√™te
        @"
=================================================================
RAPPORT DE VALIDATION DU SYST√àME DE CATALOGUE SQLITE
=================================================================

Date de validation: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
Syst√®me: $env:COMPUTERNAME
Utilisateur: $env:USERNAME
PowerShell: $($PSVersionTable.PSVersion)
R√©pertoire projet: $ProjectRoot

=================================================================

"@ | Out-File -FilePath $reportPath -Encoding UTF8 -Force
        
        $script:OutputReport = $reportPath
        Write-Info "Rapport d√©taill√© : $reportPath"
    }
}

# Fonction principale
function Main {
    Write-Host ""
    Write-Host "üß™ VALIDATION DU SYST√àME DE CATALOGUE SQLITE" -ForegroundColor Cyan
    Write-Host "=============================================" -ForegroundColor Cyan
    Write-Host ""
    
    # Initialisation
    Initialize-TestEnvironment
    
    # Configuration du trap pour nettoyage
    trap {
        Clean-TestEnvironment
        exit 1
    }
    
    Write-Info "üéØ Configuration de validation :"
    Write-Info "  Mode rapide          : $(if ($QuickTest) { 'Oui' } else { 'Non' })"
    Write-Info "  Backup               : $(if ($SkipBackup) { 'Ignor√©' } else { 'Cr√©√©' })"
    Write-Info "  Verbeux              : $(if ($Verbose) { 'Oui' } else { 'Non' })"
    Write-Info "  R√©pertoire projet    : $ProjectRoot"
    Write-Info ""
    
    # Ex√©cution des tests
    try {
        # Backup pr√©ventif
        Create-TestBackup | Out-Null
        
        # Tests principaux
        Test-Prerequisites | Out-Null
        Test-DatabaseIntegrity | Out-Null
        Test-ManagementTools | Out-Null
        Test-ScriptFunctionality | Out-Null
        Test-BasicPerformance | Out-Null
        Test-DataConsistency | Out-Null
        
        # Rapport final
        Show-ValidationReport
        
        # Nettoyage
        Clean-TestEnvironment
        
        # Code de sortie
        if ($TestResults.Failed -eq 0) {
            exit $EXIT_SUCCESS
        }
        else {
            exit $EXIT_ERROR_TOOLS
        }
    }
    catch {
        Write-Error-Custom "Erreur critique lors de la validation : $($_.Exception.Message)"
        Clean-TestEnvironment
        exit $EXIT_ERROR_DB
    }
}

# Point d'entr√©e
if ($MyInvocation.InvocationName -ne ".") {
    Main
}