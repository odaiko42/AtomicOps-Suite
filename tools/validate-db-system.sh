#!/bin/bash
#
# Script: validate-db-system.sh
# Description: Valide que le syst√®me de base de donn√©es catalogue fonctionne
# Usage: ./validate-db-system.sh
#

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
DB_FILE="$PROJECT_ROOT/database/scripts_catalogue.db"

# Import des biblioth√®ques
source "$PROJECT_ROOT/lib/common.sh"
source "$PROJECT_ROOT/lib/logger.sh"

# Variables globales de test
TEMP_TEST_DIR=""
TEST_ERRORS=0

# Fonction d'aide
show_help() {
    cat <<EOF
Usage: $0

Valide le syst√®me complet de base de donn√©es catalogue

Tests effectu√©s:
  ‚úì Initialisation de la base de donn√©es
  ‚úì Enregistrement de scripts
  ‚úì Recherches et requ√™tes
  ‚úì Export des donn√©es
  ‚úì Int√©grit√© et performance

Options:
  -h, --help      Affiche cette aide

EOF
}

# Initialisation des tests
setup_test_environment() {
    log_info "üß™ Initialisation de l'environnement de test"
    
    # Cr√©er un r√©pertoire temporaire pour les tests
    TEMP_TEST_DIR=$(mktemp -d)
    log_debug "R√©pertoire de test: $TEMP_TEST_DIR"
    
    # Backup de la base existante si elle existe
    if [[ -f "$DB_FILE" ]]; then
        cp "$DB_FILE" "$TEMP_TEST_DIR/backup_original.db"
        log_debug "Backup de la base originale cr√©√©"
    fi
}

# Nettoyage apr√®s tests
cleanup_test_environment() {
    log_info "üßπ Nettoyage de l'environnement de test"
    
    # Restaurer la base originale si elle existait
    if [[ -f "$TEMP_TEST_DIR/backup_original.db" ]]; then
        cp "$TEMP_TEST_DIR/backup_original.db" "$DB_FILE"
        log_debug "Base originale restaur√©e"
    fi
    
    # Nettoyer le r√©pertoire temporaire
    if [[ -n "$TEMP_TEST_DIR" && -d "$TEMP_TEST_DIR" ]]; then
        rm -rf "$TEMP_TEST_DIR"
        log_debug "R√©pertoire de test nettoy√©"
    fi
}

# Test d'initialisation de la base
test_database_initialization() {
    log_info "üìã Test 1: Initialisation de la base de donn√©es"
    
    # Supprimer la base existante pour le test
    [[ -f "$DB_FILE" ]] && rm -f "$DB_FILE"
    
    # Tester l'initialisation
    if "$PROJECT_ROOT/database/init-db.sh" >/dev/null 2>&1; then
        log_info "‚úì Initialisation r√©ussie"
        
        # V√©rifier que la base existe
        if [[ -f "$DB_FILE" ]]; then
            log_debug "‚úì Fichier base cr√©√©"
        else
            log_error "‚úó Fichier base manquant"
            TEST_ERRORS=$((TEST_ERRORS + 1))
            return 1
        fi
        
        # V√©rifier les tables
        local table_count
        table_count=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';")
        
        if [[ "$table_count" -ge 10 ]]; then
            log_debug "‚úì Tables cr√©√©es ($table_count tables)"
        else
            log_error "‚úó Nombre de tables insuffisant: $table_count"
            TEST_ERRORS=$((TEST_ERRORS + 1))
            return 1
        fi
        
        return 0
    else
        log_error "‚úó √âchec initialisation"
        TEST_ERRORS=$((TEST_ERRORS + 1))
        return 1
    fi
}

# Test d'enregistrement de scripts
test_script_registration() {
    log_info "üìù Test 2: Enregistrement de scripts"
    
    # Tester l'enregistrement d'un script existant
    local test_script="tools/dev-helper.sh"
    
    if "$PROJECT_ROOT/tools/register-script.sh" "$test_script" --auto >/dev/null 2>&1; then
        log_info "‚úì Enregistrement unitaire r√©ussi"
        
        # V√©rifier que le script est dans la base
        local script_count
        script_count=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM scripts WHERE name = 'dev-helper.sh';")
        
        if [[ "$script_count" -eq 1 ]]; then
            log_debug "‚úì Script trouv√© dans la base"
        else
            log_error "‚úó Script non trouv√© dans la base"
            TEST_ERRORS=$((TEST_ERRORS + 1))
            return 1
        fi
    else
        log_error "‚úó √âchec enregistrement unitaire"
        TEST_ERRORS=$((TEST_ERRORS + 1))
        return 1
    fi
    
    # Tester l'enregistrement en masse
    if "$PROJECT_ROOT/tools/register-all-scripts.sh" >/dev/null 2>&1; then
        log_info "‚úì Enregistrement en masse r√©ussi"
        
        # V√©rifier le nombre de scripts
        local total_scripts
        total_scripts=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM scripts;")
        
        if [[ "$total_scripts" -ge 5 ]]; then
            log_debug "‚úì $total_scripts scripts enregistr√©s"
        else
            log_error "‚úó Nombre de scripts insuffisant: $total_scripts"
            TEST_ERRORS=$((TEST_ERRORS + 1))
            return 1
        fi
    else
        log_error "‚úó √âchec enregistrement en masse"  
        TEST_ERRORS=$((TEST_ERRORS + 1))
        return 1
    fi
    
    return 0
}

# Test des fonctionnalit√©s de recherche
test_search_functionality() {
    log_info "üîç Test 3: Fonctionnalit√©s de recherche"
    
    # Test recherche g√©n√©rale
    if "$PROJECT_ROOT/tools/search-db.sh" --all >/dev/null 2>&1; then
        log_debug "‚úì Recherche --all fonctionne"
    else
        log_error "‚úó √âchec recherche --all"
        TEST_ERRORS=$((TEST_ERRORS + 1))
    fi
    
    # Test statistiques
    if "$PROJECT_ROOT/tools/search-db.sh" --stats >/dev/null 2>&1; then
        log_debug "‚úì Statistiques fonctionnent"
    else
        log_error "‚úó √âchec statistiques"
        TEST_ERRORS=$((TEST_ERRORS + 1))
    fi
    
    # Test info d√©taill√©e (si script existe)
    local existing_script
    existing_script=$(sqlite3 "$DB_FILE" "SELECT name FROM scripts LIMIT 1;" 2>/dev/null || echo "")
    
    if [[ -n "$existing_script" ]]; then
        if "$PROJECT_ROOT/tools/search-db.sh" --info "$existing_script" >/dev/null 2>&1; then
            log_debug "‚úì Info d√©taill√©e fonctionne"
        else
            log_error "‚úó √âchec info d√©taill√©e"
            TEST_ERRORS=$((TEST_ERRORS + 1))
        fi
    fi
    
    # Test recherche par type
    if "$PROJECT_ROOT/tools/search-db.sh" --type atomic >/dev/null 2>&1; then
        log_debug "‚úì Recherche par type fonctionne"
    else
        log_error "‚úó √âchec recherche par type"
        TEST_ERRORS=$((TEST_ERRORS + 1))
    fi
    
    log_info "‚úì Tests de recherche termin√©s"
    return 0
}

# Test des exports
test_export_functionality() {
    log_info "üì§ Test 4: Fonctionnalit√©s d'export"
    
    local test_export_dir="$TEMP_TEST_DIR/exports"
    mkdir -p "$test_export_dir"
    
    # Test export JSON
    if "$PROJECT_ROOT/tools/export-db.sh" json --output-dir "$test_export_dir" >/dev/null 2>&1; then
        log_debug "‚úì Export JSON fonctionne"
        
        # V√©rifier que le fichier JSON existe et est valide
        local json_file
        json_file=$(find "$test_export_dir" -name "*.json" -type f | head -1)
        
        if [[ -f "$json_file" ]]; then
            if command -v jq >/dev/null 2>&1; then
                if jq . "$json_file" >/dev/null 2>&1; then
                    log_debug "‚úì JSON valide"
                else
                    log_error "‚úó JSON invalide"
                    TEST_ERRORS=$((TEST_ERRORS + 1))
                fi
            else
                log_debug "? JSON cr√©√© (jq non disponible pour validation)"
            fi
        else
            log_error "‚úó Fichier JSON non cr√©√©"
            TEST_ERRORS=$((TEST_ERRORS + 1))
        fi
    else
        log_error "‚úó √âchec export JSON"
        TEST_ERRORS=$((TEST_ERRORS + 1))
    fi
    
    # Test backup
    if "$PROJECT_ROOT/tools/export-db.sh" backup --output-dir "$test_export_dir" >/dev/null 2>&1; then
        log_debug "‚úì Backup fonctionne"
        
        # V√©rifier que le backup existe
        local backup_file
        backup_file=$(find "$test_export_dir" -name "backup_*.db" -type f | head -1)
        
        if [[ -f "$backup_file" ]]; then
            # V√©rifier que le backup est une base SQLite valide
            if sqlite3 "$backup_file" "SELECT COUNT(*) FROM scripts;" >/dev/null 2>&1; then
                log_debug "‚úì Backup valide"
            else
                log_error "‚úó Backup invalide"
                TEST_ERRORS=$((TEST_ERRORS + 1))
            fi
        else
            log_error "‚úó Fichier backup non cr√©√©"
            TEST_ERRORS=$((TEST_ERRORS + 1))
        fi
    else
        log_error "‚úó √âchec backup"
        TEST_ERRORS=$((TEST_ERRORS + 1))
    fi
    
    log_info "‚úì Tests d'export termin√©s"
    return 0
}

# Test de l'int√©grit√© et performance
test_integrity_performance() {
    log_info "üîß Test 5: Int√©grit√© et performance"
    
    # Test int√©grit√© SQLite
    local integrity_result
    integrity_result=$(sqlite3 "$DB_FILE" "PRAGMA integrity_check;" 2>/dev/null || echo "error")
    
    if [[ "$integrity_result" == "ok" ]]; then
        log_debug "‚úì Int√©grit√© base OK"
    else
        log_error "‚úó Probl√®me int√©grit√©: $integrity_result"
        TEST_ERRORS=$((TEST_ERRORS + 1))
    fi
    
    # Test des contraintes de cl√©s √©trang√®res
    local foreign_key_check
    foreign_key_check=$(sqlite3 "$DB_FILE" "PRAGMA foreign_key_check;" 2>/dev/null)
    
    if [[ -z "$foreign_key_check" ]]; then
        log_debug "‚úì Contraintes cl√©s √©trang√®res OK"
    else
        log_error "‚úó Violations cl√©s √©trang√®res: $foreign_key_check"
        TEST_ERRORS=$((TEST_ERRORS + 1))
    fi
    
    # Test performance basique (requ√™te complexe)
    local start_time=$(date +%s%N)
    
    sqlite3 "$DB_FILE" <<EOF >/dev/null 2>&1
SELECT s.name, COUNT(sd.id) as dep_count
FROM scripts s
LEFT JOIN script_dependencies sd ON s.id = sd.script_id
GROUP BY s.id
ORDER BY dep_count DESC
LIMIT 10;
EOF
    
    local end_time=$(date +%s%N)
    local duration_ms=$(( (end_time - start_time) / 1000000 ))
    
    if [[ $duration_ms -lt 1000 ]]; then
        log_debug "‚úì Performance OK (${duration_ms}ms)"
    else
        log_warn "‚ö† Performance lente (${duration_ms}ms)"
    fi
    
    # V√©rifier la taille de la base
    local db_size_kb
    db_size_kb=$(du -k "$DB_FILE" | cut -f1)
    
    if [[ $db_size_kb -lt 10240 ]]; then  # < 10MB
        log_debug "‚úì Taille base acceptable (${db_size_kb}KB)"
    else
        log_warn "‚ö† Base volumineuse (${db_size_kb}KB)"
    fi
    
    log_info "‚úì Tests int√©grit√©/performance termin√©s"
    return 0
}

# Affichage du rapport final
show_test_report() {
    echo ""
    echo "üìä RAPPORT DE VALIDATION"
    echo "========================"
    echo ""
    
    if [[ $TEST_ERRORS -eq 0 ]]; then
        log_info "üéâ SUCC√àS - Tous les tests sont pass√©s !"
        echo ""
        echo "Le syst√®me de catalogue SQLite est pleinement fonctionnel :"
        echo "  ‚úì Base de donn√©es op√©rationnelle"
        echo "  ‚úì Enregistrement de scripts fonctionnel"
        echo "  ‚úì Recherches et requ√™tes disponibles"
        echo "  ‚úì Exports et sauvegardes pr√™ts"
        echo "  ‚úì Int√©grit√© et performances valid√©es"
        echo ""
        echo "Prochaines √©tapes recommand√©es :"
        echo "  1. ./tools/register-all-scripts.sh     # Enregistrer tous vos scripts"
        echo "  2. ./tools/search-db.sh --stats        # Voir les statistiques"
        echo "  3. ./tools/export-db.sh backup         # Cr√©er un backup"
        
    else
        log_error "‚ùå √âCHEC - $TEST_ERRORS erreur(s) d√©tect√©e(s)"
        echo ""
        echo "Le syst√®me pr√©sente des dysfonctionnements."
        echo "V√©rifiez les logs ci-dessus et corrigez les probl√®mes."
        echo ""
        echo "Actions de d√©pannage :"
        echo "  1. V√©rifiez les permissions sur database/"
        echo "  2. Testez sqlite3 : sqlite3 --version"
        echo "  3. R√©initialisez : ./database/init-db.sh --force"
    fi
    
    echo ""
    echo "Base de donn√©es : $DB_FILE"
    if [[ -f "$DB_FILE" ]]; then
        echo "Taille base     : $(du -h "$DB_FILE" | cut -f1)"
        echo "Scripts catalogu√©s : $(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM scripts;" 2>/dev/null || echo "N/A")"
    else
        echo "Statut          : Base non trouv√©e"
    fi
}

# Point d'entr√©e principal
main() {
    # Initialisation du logging
    init_logging "$(basename "$0")"
    
    log_info "üß™ Validation du syst√®me de catalogue SQLite"
    
    # V√©rification des arguments
    if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
        show_help
        exit $EXIT_SUCCESS
    fi
    
    # Configuration du trap pour nettoyage
    trap cleanup_test_environment EXIT ERR INT TERM
    
    # Initialisation
    setup_test_environment
    
    # Ex√©cution des tests
    log_info "D√©but des tests de validation"
    echo ""
    
    test_database_initialization
    test_script_registration  
    test_search_functionality
    test_export_functionality
    test_integrity_performance
    
    # Rapport final
    show_test_report
    
    # Code de sortie selon les r√©sultats
    if [[ $TEST_ERRORS -eq 0 ]]; then
        exit $EXIT_SUCCESS
    else
        exit $EXIT_ERROR_GENERAL
    fi
}

# Ex√©cution
main "$@"