#Requires -Version 5.1
<#
.SYNOPSIS
    Enregistre tous les scripts du projet dans le catalogue SQLite en mode batch.

.DESCRIPTION
    Ce script PowerShell parcourt r√©cursivement tous les scripts Bash du projet
    et les enregistre automatiquement dans la base de donn√©es catalogue.
    
    Fonctionnalit√©s :
    - D√©couverte automatique des scripts (.sh, .bash)
    - Traitement par lots avec gestion d'erreurs
    - Rapport d√©taill√© avec statistiques
    - Mode simulation (dry-run)
    - Filtrage par r√©pertoire et type
    - Mise √† jour des scripts existants

.PARAMETER Path
    R√©pertoire racine √† analyser (par d√©faut: r√©pertoire du projet)

.PARAMETER Include
    Pattern de fichiers √† inclure (par d√©faut: *.sh)

.PARAMETER Exclude
    R√©pertoires √† exclure (par d√©faut: .git, node_modules, etc.)

.PARAMETER DryRun
    Mode simulation - affiche ce qui serait fait sans modifier la base

.PARAMETER Force
    Force la mise √† jour des scripts existants

.PARAMETER Quiet
    Mode silencieux, affiche uniquement les erreurs et le r√©sum√©

.PARAMETER MaxDepth
    Profondeur maximale de r√©cursion (par d√©faut: 10)

.EXAMPLE
    .\register-all-scripts.ps1
    
.EXAMPLE
    .\register-all-scripts.ps1 -Path "C:\Scripts" -DryRun
    
.EXAMPLE
    .\register-all-scripts.ps1 -Force -Quiet

.NOTES
    Auteur: Syst√®me de Catalogue SQLite CT
    Version: 1.0
    Date: 3 octobre 2025
    
    Pr√©requis:
    - SQLite3 accessible ou module PSSQLite
    - Base de donn√©es initialis√©e
    - register-script.ps1 pr√©sent
#>

[CmdletBinding()]
param(
    [Parameter(HelpMessage="R√©pertoire racine √† analyser")]
    [ValidateScript({Test-Path $_ -PathType Container})]
    [string]$Path,
    
    [Parameter(HelpMessage="Pattern de fichiers √† inclure")]
    [string]$Include = "*.sh",
    
    [Parameter(HelpMessage="R√©pertoires √† exclure")]
    [string[]]$Exclude = @(".git", "node_modules", "temp", "tmp", "exports"),
    
    [Parameter(HelpMessage="Mode simulation sans modification")]
    [switch]$DryRun,
    
    [Parameter(HelpMessage="Force la mise √† jour des scripts existants")]
    [switch]$Force,
    
    [Parameter(HelpMessage="Mode silencieux")]
    [switch]$Quiet,
    
    [Parameter(HelpMessage="Profondeur maximale de r√©cursion")]
    [ValidateRange(1, 20)]
    [int]$MaxDepth = 10
)

# Configuration globale
$ErrorActionPreference = "Continue"  # Continue sur erreur pour traiter tous les scripts
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$ProjectRoot = Split-Path -Parent $ScriptDir
$DatabaseFile = Join-Path $ProjectRoot "database\scripts_catalogue.db"
$RegisterScriptPath = Join-Path $ScriptDir "register-script.ps1"

# Si pas de chemin sp√©cifi√©, utiliser la racine du projet
if (-not $Path) {
    $Path = $ProjectRoot
}

# Codes de sortie
$EXIT_SUCCESS = 0
$EXIT_ERROR_ARGS = 1
$EXIT_ERROR_DB = 2
$EXIT_ERROR_SCRIPTS = 3

# Variables de statistiques
$Stats = @{
    TotalFound = 0
    Processed = 0
    Success = 0
    Errors = 0
    Skipped = 0
    Updated = 0
    ErrorList = @()
    StartTime = Get-Date
}

# Fonctions de logging avec couleurs
function Write-Info {
    param([string]$Message)
    if (-not $Quiet) {
        Write-Host "[INFO] $Message" -ForegroundColor Cyan
    }
}

function Write-Warn {
    param([string]$Message)
    if (-not $Quiet) {
        Write-Host "[WARN] $Message" -ForegroundColor Yellow
    }
}

function Write-Success {
    param([string]$Message)
    if (-not $Quiet) {
        Write-Host "[OK] $Message" -ForegroundColor Green
    }
}

function Write-Error-Custom {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Fonction pour ex√©cuter des commandes SQLite
function Invoke-SQLite {
    param(
        [string]$Query,
        [string]$Database = $DatabaseFile,
        [switch]$NoOutput
    )
    
    try {
        if (Get-Command sqlite3 -ErrorAction SilentlyContinue) {
            $result = & sqlite3 $Database $Query 2>$null
            if ($LASTEXITCODE -ne 0) {
                throw "Erreur SQLite: $LASTEXITCODE"
            }
            return $result
        }
        elseif (Get-Module -ListAvailable -Name PSSQLite) {
            Import-Module PSSQLite
            return Invoke-SqliteQuery -DataSource $Database -Query $Query
        }
        else {
            throw "SQLite3 non disponible. Installez sqlite3 ou le module PSSQLite."
        }
    }
    catch {
        throw
    }
}

# Fonction pour v√©rifier la base de donn√©es
function Test-Database {
    if (-not (Test-Path $DatabaseFile)) {
        Write-Error-Custom "Base de donn√©es non trouv√©e: $DatabaseFile"
        Write-Info "Initialisez la base avec: .\database\init-db.ps1"
        return $false
    }
    
    try {
        $tableCount = Invoke-SQLite "SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';"
        if ([int]$tableCount -lt 5) {
            Write-Error-Custom "Base de donn√©es incompl√®te ($tableCount tables)"
            return $false
        }
        return $true
    }
    catch {
        Write-Error-Custom "Base de donn√©es corrompue: $_"
        return $false
    }
}

# Fonction pour v√©rifier le script register-script.ps1
function Test-RegisterScript {
    if (-not (Test-Path $RegisterScriptPath)) {
        Write-Error-Custom "Script register-script.ps1 non trouv√©: $RegisterScriptPath"
        return $false
    }
    return $true
}

# Fonction pour d√©couvrir tous les scripts
function Find-Scripts {
    param(
        [string]$SearchPath,
        [string]$Pattern,
        [string[]]$ExcludeDirs,
        [int]$Depth
    )
    
    Write-Info "üîç Recherche des scripts dans: $SearchPath"
    Write-Info "   Pattern: $Pattern, Profondeur max: $Depth"
    
    $foundScripts = @()
    
    try {
        # Construire le filtre d'exclusion pour Get-ChildItem
        $excludePattern = if ($ExcludeDirs) {
            "^(" + ($ExcludeDirs -join "|") + ")$"
        } else {
            $null
        }
        
        # Recherche r√©cursive des fichiers
        $allFiles = Get-ChildItem -Path $SearchPath -Filter $Pattern -Recurse -File -ErrorAction SilentlyContinue |
                   Where-Object {
                       # Filtrer les r√©pertoires exclus
                       if ($excludePattern) {
                           $relativePath = $_.FullName.Substring($SearchPath.Length).TrimStart('\', '/')
                           $pathParts = $relativePath.Split('\', '/')
                           $shouldExclude = $pathParts | Where-Object { $_ -match $excludePattern }
                           return -not $shouldExclude
                       }
                       return $true
                   } |
                   Where-Object {
                       # V√©rifier la profondeur
                       $relativePath = $_.FullName.Substring($SearchPath.Length).TrimStart('\', '/')
                       $depth = ($relativePath.Split('\', '/').Count - 1)
                       return $depth -le $Depth
                   }
        
        foreach ($file in $allFiles) {
            # V√©rifier que c'est bien un script (commence par shebang ou a une extension .sh/.bash)
            $isScript = $false
            
            if ($file.Extension -in @('.sh', '.bash')) {
                $isScript = $true
            }
            elseif ($file.Extension -eq '') {
                # V√©rifier le shebang pour les fichiers sans extension
                try {
                    $firstLine = Get-Content $file.FullName -TotalCount 1 -ErrorAction SilentlyContinue
                    if ($firstLine -and $firstLine.StartsWith('#!') -and $firstLine -match '(bash|sh)') {
                        $isScript = $true
                    }
                }
                catch {
                    # Ignorer les erreurs de lecture
                }
            }
            
            if ($isScript) {
                $foundScripts += @{
                    Path = $file.FullName
                    Name = $file.Name
                    Size = $file.Length
                    LastModified = $file.LastWriteTime
                    RelativePath = $file.FullName.Substring($SearchPath.Length).TrimStart('\', '/')
                }
            }
        }
        
        $Stats.TotalFound = $foundScripts.Count
        Write-Info "‚úì Trouv√© $($foundScripts.Count) script(s)"
        
        return $foundScripts
    }
    catch {
        Write-Error-Custom "Erreur lors de la recherche: $_"
        return @()
    }
}

# Fonction pour traiter un script individuel
function Process-Script {
    param([hashtable]$ScriptInfo)
    
    $scriptName = $ScriptInfo.Name
    $scriptPath = $ScriptInfo.Path
    
    if (-not $Quiet) {
        Write-Host "  üìÑ $($ScriptInfo.RelativePath)" -NoNewline
    }
    
    try {
        $Stats.Processed++
        
        if ($DryRun) {
            if (-not $Quiet) {
                Write-Host " [SIMULATION]" -ForegroundColor Yellow
            }
            $Stats.Success++
            return $true
        }
        
        # Pr√©parer les arguments pour register-script.ps1
        $registerArgs = @(
            '-ScriptPath', $scriptPath,
            '-Auto'
        )
        
        if ($Force) {
            $registerArgs += '-Force'
        }
        
        if ($Quiet) {
            $registerArgs += '-Quiet'
        }
        
        # Ex√©cuter le script d'enregistrement
        $result = & powershell.exe -File $RegisterScriptPath @registerArgs
        
        if ($LASTEXITCODE -eq 0) {
            if (-not $Quiet) {
                Write-Host " ‚úì" -ForegroundColor Green
            }
            $Stats.Success++
            return $true
        }
        else {
            if (-not $Quiet) {
                Write-Host " ‚úó" -ForegroundColor Red
            }
            $errorMsg = "Code de sortie: $LASTEXITCODE"
            $Stats.ErrorList += "$scriptName : $errorMsg"
            $Stats.Errors++
            return $false
        }
    }
    catch {
        if (-not $Quiet) {
            Write-Host " ‚úó" -ForegroundColor Red
        }
        $errorMsg = $_.Exception.Message
        $Stats.ErrorList += "$scriptName : $errorMsg"
        $Stats.Errors++
        return $false
    }
}

# Fonction pour afficher la barre de progression
function Show-Progress {
    param(
        [int]$Current,
        [int]$Total,
        [string]$CurrentItem = ""
    )
    
    if ($Quiet -or $Total -eq 0) {
        return
    }
    
    $percentage = [math]::Round(($Current / $Total) * 100, 1)
    $barLength = 30
    $filledLength = [math]::Round(($Current / $Total) * $barLength)
    
    $bar = "‚ñà" * $filledLength + "‚ñë" * ($barLength - $filledLength)
    
    Write-Host "`rüîÑ Progression: [$bar] $percentage% ($Current/$Total) $CurrentItem" -NoNewline
    
    if ($Current -eq $Total) {
        Write-Host ""  # Nouvelle ligne √† la fin
    }
}

# Fonction pour afficher le rapport final
function Show-FinalReport {
    $endTime = Get-Date
    $duration = $endTime - $Stats.StartTime
    
    Write-Host ""
    Write-Host "üìä RAPPORT D'ENREGISTREMENT" -ForegroundColor Cyan
    Write-Host "============================" -ForegroundColor Cyan
    Write-Host ""
    
    Write-Host "üìà Statistiques g√©n√©rales :" -ForegroundColor White
    Write-Host "  Scripts d√©couverts   : $($Stats.TotalFound)" -ForegroundColor Gray
    Write-Host "  Scripts trait√©s      : $($Stats.Processed)" -ForegroundColor Gray
    Write-Host "  Succ√®s               : " -NoNewline -ForegroundColor Gray
    Write-Host "$($Stats.Success)" -ForegroundColor Green
    Write-Host "  Erreurs              : " -NoNewline -ForegroundColor Gray
    Write-Host "$($Stats.Errors)" -ForegroundColor Red
    Write-Host "  Ignor√©s              : $($Stats.Skipped)" -ForegroundColor Gray
    Write-Host ""
    
    # Calcul du taux de r√©ussite
    $successRate = if ($Stats.Processed -gt 0) {
        [math]::Round(($Stats.Success / $Stats.Processed) * 100, 1)
    } else { 0 }
    
    Write-Host "‚ö° Performance :" -ForegroundColor White
    Write-Host "  Dur√©e totale         : $($duration.ToString('mm\:ss'))" -ForegroundColor Gray
    Write-Host "  Taux de r√©ussite     : $successRate%" -ForegroundColor Gray
    Write-Host "  Scripts/seconde      : $(if ($duration.TotalSeconds -gt 0) { [math]::Round($Stats.Processed / $duration.TotalSeconds, 2) } else { 'N/A' })" -ForegroundColor Gray
    Write-Host ""
    
    # Mode simulation
    if ($DryRun) {
        Write-Host "üß™ Mode Simulation :" -ForegroundColor Yellow
        Write-Host "  Aucune modification effectu√©e" -ForegroundColor Yellow
        Write-Host "  Utilisez sans -DryRun pour enregistrer r√©ellement" -ForegroundColor Yellow
        Write-Host ""
    }
    
    # Informations sur la base de donn√©es
    if (-not $DryRun -and (Test-Path $DatabaseFile)) {
        try {
            $totalScriptsInDB = Invoke-SQLite "SELECT COUNT(*) FROM scripts;"
            $dbSize = (Get-Item $DatabaseFile).Length
            $dbSizeKB = [math]::Round($dbSize / 1KB, 1)
            
            Write-Host "üóÑÔ∏è  Base de donn√©es :" -ForegroundColor White
            Write-Host "  Scripts catalogu√©s   : $totalScriptsInDB" -ForegroundColor Gray
            Write-Host "  Taille de la base    : $dbSizeKB KB" -ForegroundColor Gray
            Write-Host "  Fichier              : $DatabaseFile" -ForegroundColor Gray
            Write-Host ""
        }
        catch {
            Write-Warn "Impossible de lire les statistiques de la base"
        }
    }
    
    # Liste des erreurs si pr√©sentes
    if ($Stats.Errors -gt 0) {
        Write-Host "‚ùå Erreurs rencontr√©es :" -ForegroundColor Red
        foreach ($error in $Stats.ErrorList) {
            Write-Host "  ‚Ä¢ $error" -ForegroundColor Red
        }
        Write-Host ""
        
        Write-Host "üîß Actions sugg√©r√©es :" -ForegroundColor Yellow
        Write-Host "  1. V√©rifiez les permissions des fichiers" -ForegroundColor Gray
        Write-Host "  2. Contr√¥lez la syntaxe des scripts en erreur" -ForegroundColor Gray
        Write-Host "  3. Relancez avec -Force pour forcer la mise √† jour" -ForegroundColor Gray
        Write-Host ""
    }
    
    # Message final
    if ($Stats.Errors -eq 0) {
        Write-Success "üéâ Enregistrement termin√© avec succ√®s !"
        if (-not $DryRun) {
            Write-Info "Utilisez .\tools\search-db.ps1 -Stats pour voir les statistiques"
        }
    }
    else {
        Write-Error-Custom "‚ö†Ô∏è  Enregistrement termin√© avec $($Stats.Errors) erreur(s)"
    }
}

# Fonction principale
function Main {
    Write-Info "üìö Enregistrement en masse des scripts dans le catalogue SQLite"
    
    # V√©rifications pr√©liminaires
    if (-not (Test-Database)) {
        exit $EXIT_ERROR_DB
    }
    
    if (-not (Test-RegisterScript)) {
        exit $EXIT_ERROR_SCRIPTS
    }
    
    # Mode simulation
    if ($DryRun) {
        Write-Warn "üß™ MODE SIMULATION - Aucune modification ne sera effectu√©e"
    }
    
    Write-Info "üéØ Configuration:"
    Write-Info "  R√©pertoire source    : $Path"
    Write-Info "  Pattern de fichiers  : $Include"
    Write-Info "  R√©pertoires exclus   : $($Exclude -join ', ')"
    Write-Info "  Profondeur max       : $MaxDepth"
    Write-Info ""
    
    # D√©couverte des scripts
    $scripts = Find-Scripts -SearchPath $Path -Pattern $Include -ExcludeDirs $Exclude -Depth $MaxDepth
    
    if ($scripts.Count -eq 0) {
        Write-Warn "Aucun script trouv√© dans $Path"
        exit $EXIT_SUCCESS
    }
    
    Write-Info ""
    Write-Info "üîÑ Traitement des scripts..."
    
    # Traitement des scripts
    for ($i = 0; $i -lt $scripts.Count; $i++) {
        $script = $scripts[$i]
        
        if (-not $Quiet) {
            Show-Progress -Current ($i + 1) -Total $scripts.Count -CurrentItem $script.Name
        }
        
        Process-Script $script
    }
    
    # Rapport final
    Show-FinalReport
    
    # Code de sortie selon les r√©sultats
    if ($Stats.Errors -eq 0) {
        exit $EXIT_SUCCESS
    }
    elseif ($Stats.Success -gt 0) {
        exit $EXIT_ERROR_SCRIPTS  # Succ√®s partiel
    }
    else {
        exit $EXIT_ERROR_SCRIPTS  # √âchec complet
    }
}

# Point d'entr√©e
if ($MyInvocation.InvocationName -ne ".") {
    Main
}