#!/bin/bash
#
# Script: setup-db-system.sh
# Description: Script de mise en place compl√®te du syst√®me de catalogue SQLite
# Usage: ./setup-db-system.sh [--force]
#

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Import des biblioth√®ques
source "$PROJECT_ROOT/lib/common.sh" 2>/dev/null || {
    echo "[INFO] Biblioth√®que commune non trouv√©e, utilisation de fonctions basiques"
    info() { echo -e "\033[36m[INFO]\033[0m $1"; }
    warn() { echo -e "\033[33m[WARN]\033[0m $1"; }
    error() { echo -e "\033[31m[ERROR]\033[0m $1"; }
    ok() { echo -e "\033[32m[OK]\033[0m $1"; }
}

# Fonction d'aide
show_help() {
    cat <<EOF
Usage: $0 [--force]

Met en place le syst√®me complet de catalogue SQLite pour les scripts CT.

Ce script effectue automatiquement :
  1. Initialisation de la base de donn√©es
  2. Enregistrement de tous les scripts existants
  3. Validation du syst√®me
  4. Configuration des hooks Git (optionnel)

Options:
  --force         Force la r√©initialisation m√™me si une base existe
  -h, --help      Affiche cette aide

Composants install√©s :
  üìÑ Base de donn√©es : database/scripts_catalogue.db
  üîß Outils         : tools/{register-script,register-all-scripts,search-db,export-db}.sh
  ‚úÖ Validation     : tools/validate-db-system.sh
  üìö Documentation : database/README.md

EOF
}

# V√©rification des pr√©requis
check_prerequisites() {
    info "üîç V√©rification des pr√©requis"
    
    local missing_tools=()
    
    # V√©rifier sqlite3
    if ! command -v sqlite3 >/dev/null 2>&1; then
        missing_tools+=("sqlite3")
    fi
    
    # V√©rifier bash
    if ! command -v bash >/dev/null 2>&1; then
        missing_tools+=("bash")
    fi
    
    # Optionnel : jq pour les exports JSON
    if ! command -v jq >/dev/null 2>&1; then
        warn "jq non trouv√© - les exports JSON seront sans formatage"
    fi
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        error "Outils manquants : ${missing_tools[*]}"
        echo ""
        echo "Installation requise :"
        echo "  Ubuntu/Debian : sudo apt-get install sqlite3 bash"
        echo "  CentOS/RHEL   : sudo yum install sqlite bash"
        echo "  Alpine        : sudo apk add sqlite bash"
        echo ""
        return 1
    fi
    
    ok "Pr√©requis valid√©s"
    return 0
}

# V√©rification de la structure du projet
check_project_structure() {
    info "üìÅ V√©rification de la structure du projet"
    
    local required_dirs=("database" "tools" "exports")
    local required_files=(
        "database/init-db.sh"
        "tools/register-script.sh" 
        "tools/register-all-scripts.sh"
        "tools/search-db.sh"
        "tools/export-db.sh"
    )
    
    # V√©rifier les r√©pertoires
    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$PROJECT_ROOT/$dir" ]]; then
            error "R√©pertoire manquant : $dir"
            return 1
        fi
    done
    
    # V√©rifier les fichiers essentiels
    for file in "${required_files[@]}"; do
        if [[ ! -f "$PROJECT_ROOT/$file" ]]; then
            error "Fichier manquant : $file"
            return 1
        fi
        
        if [[ ! -x "$PROJECT_ROOT/$file" ]]; then
            warn "Fichier non ex√©cutable : $file"
            chmod +x "$PROJECT_ROOT/$file" 2>/dev/null || true
        fi
    done
    
    ok "Structure du projet valid√©e"
    return 0
}

# Initialisation de la base de donn√©es
initialize_database() {
    local force_init="${1:-false}"
    
    info "üóÑÔ∏è Initialisation de la base de donn√©es"
    
    local db_file="$PROJECT_ROOT/database/scripts_catalogue.db"
    
    # V√©rifier si la base existe d√©j√†
    if [[ -f "$db_file" && "$force_init" != "true" ]]; then
        warn "Base de donn√©es existante trouv√©e"
        echo -n "Voulez-vous la r√©initialiser ? [y/N] "
        read -r response
        case "$response" in
            [yY]|[yY][eE][sS])
                info "R√©initialisation de la base..."
                ;;
            *)
                info "Conservation de la base existante"
                return 0
                ;;
        esac
    fi
    
    # Ex√©cuter l'initialisation
    if "$PROJECT_ROOT/database/init-db.sh" --force 2>/dev/null; then
        ok "Base de donn√©es initialis√©e avec succ√®s"
        
        # V√©rifier que la base fonctionne
        local table_count
        table_count=$(sqlite3 "$db_file" "SELECT COUNT(*) FROM sqlite_master WHERE type='table';" 2>/dev/null)
        info "Tables cr√©√©es : $table_count"
        
        return 0
    else
        error "√âchec de l'initialisation de la base"
        return 1
    fi
}

# Enregistrement des scripts existants
register_existing_scripts() {
    info "üìù Enregistrement des scripts existants"
    
    if "$PROJECT_ROOT/tools/register-all-scripts.sh" 2>/dev/null; then
        ok "Scripts enregistr√©s avec succ√®s"
        
        # Afficher les statistiques
        local script_count
        script_count=$(sqlite3 "$PROJECT_ROOT/database/scripts_catalogue.db" \
                      "SELECT COUNT(*) FROM scripts;" 2>/dev/null)
        info "Scripts catalogu√©s : $script_count"
        
        return 0
    else
        error "√âchec de l'enregistrement des scripts"
        return 1
    fi
}

# Validation du syst√®me
validate_system() {
    info "‚úÖ Validation du syst√®me"
    
    if [[ -f "$PROJECT_ROOT/tools/validate-db-system.sh" ]]; then
        if "$PROJECT_ROOT/tools/validate-db-system.sh" >/dev/null 2>&1; then
            ok "Validation syst√®me r√©ussie"
            return 0
        else
            warn "Validation syst√®me √©chou√©e - v√©rifiez les d√©tails"
            return 1
        fi
    else
        warn "Script de validation non trouv√© - validation manuelle requise"
        return 0
    fi
}

# Configuration des hooks Git (optionnel)
setup_git_hooks() {
    info "üîó Configuration des hooks Git (optionnel)"
    
    local git_dir="$PROJECT_ROOT/.git"
    local hooks_dir="$git_dir/hooks"
    
    if [[ ! -d "$git_dir" ]]; then
        info "Pas de d√©p√¥t Git trouv√© - hooks ignor√©s"
        return 0
    fi
    
    echo -n "Configurer les hooks Git pour auto-enregistrement ? [y/N] "
    read -r response
    case "$response" in
        [yY]|[yY][eE][sS])
            # Cr√©er hook pre-commit
            cat > "$hooks_dir/pre-commit" <<'EOF'
#!/bin/bash
# Auto-enregistrement des scripts modifi√©s dans le catalogue

REPO_ROOT=$(git rev-parse --show-toplevel)

# V√©rifier si le syst√®me de catalogue existe
if [[ -f "$REPO_ROOT/tools/register-all-scripts.sh" ]]; then
    echo "üîÑ Mise √† jour du catalogue de scripts..."
    "$REPO_ROOT/tools/register-all-scripts.sh" --quiet || true
fi
EOF
            chmod +x "$hooks_dir/pre-commit"
            ok "Hook pre-commit configur√©"
            ;;
        *)
            info "Configuration des hooks ignor√©e"
            ;;
    esac
    
    return 0
}

# Affichage du r√©sum√© final
show_final_summary() {
    echo ""
    echo "üéâ INSTALLATION TERMIN√âE !"
    echo "=========================="
    echo ""
    
    local db_file="$PROJECT_ROOT/database/scripts_catalogue.db"
    
    if [[ -f "$db_file" ]]; then
        local script_count function_count
        script_count=$(sqlite3 "$db_file" "SELECT COUNT(*) FROM scripts;" 2>/dev/null || echo "N/A")
        function_count=$(sqlite3 "$db_file" "SELECT COUNT(*) FROM functions;" 2>/dev/null || echo "N/A")
        
        echo "üìä Statistiques :"
        echo "  Scripts catalogu√©s : $script_count"
        echo "  Fonctions r√©pertori√©es : $function_count"
        echo "  Base de donn√©es : $(du -h "$db_file" 2>/dev/null | cut -f1 || echo "N/A")"
    fi
    
    echo ""
    echo "üöÄ Commandes disponibles :"
    echo "  ./tools/search-db.sh --stats          # Voir les statistiques"
    echo "  ./tools/search-db.sh --all            # Lister tous les scripts"  
    echo "  ./tools/search-db.sh --info SCRIPT    # Info d√©taill√©e d'un script"
    echo "  ./tools/register-script.sh SCRIPT     # Enregistrer un nouveau script"
    echo "  ./tools/export-db.sh backup           # Cr√©er un backup"
    echo ""
    
    echo "üìö Documentation compl√®te :"
    echo "  database/README.md                     # Guide d'utilisation complet"
    echo ""
    
    echo "‚ú® Le syst√®me de catalogue SQLite est op√©rationnel !"
}

# Point d'entr√©e principal
main() {
    echo "üèóÔ∏è  MISE EN PLACE DU SYST√àME DE CATALOGUE SQLITE"
    echo "================================================="
    echo ""
    
    local force_init="false"
    
    # Traitement des arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --force)
                force_init="true"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo "Argument inconnu : $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # V√©rifications pr√©liminaires
    check_prerequisites || exit 1
    check_project_structure || exit 1
    
    echo ""
    
    # Installation du syst√®me
    initialize_database "$force_init" || exit 1
    register_existing_scripts || exit 1
    validate_system || warn "Validation partielle - syst√®me probablement fonctionnel"
    setup_git_hooks || true  # Non critique
    
    # R√©sum√©
    show_final_summary
    
    exit 0
}

# Ex√©cution
main "$@"